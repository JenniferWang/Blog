<em>This article is first published [here](http://wiki.jikexueyuan.com/project/deep-android-v1/jni.html).</em>

# Java层的MediaScanner分析

```java
// MediaScanner.java
public class MediaScanner {
  static{
    /*
     * 加载对应的JNI库，media_jni是JNI库的名字。实际加载动态库的时候会拓展成
     * libmedia_jni.so，在Windows平台上将拓展为media_jni.dll。
     */
    System.loadLibrary("media_jni");
    native_init();
  }

.......

//非native函数
public void scanDirectories(String[] directories, String volumeName){...}

//声明一个native函数。native为Java的关键字，表示它将由JNI层完成。
private static native final void native_init();
  ...
private native void processFile(String path, String mimeType,
    MediaScannerClient client);
  ...
}
```

# JNI层的MediaScanner分析
```cpp
// android_media_MediaScanner.cpp
// 这个函数是native_init的JNI层实现。
static void android_media_MediaScanner_native_init(JNIEnv *env) {
  jclass clazz;
  clazz = env->FindClass("android/media/MediaScanner");
  ... 
  fields.context = env->GetFieldID(clazz, "mNativeContext", "I");
  ...
  return;
}
```

怎么会知道Java层的`native_init`函数对应的是JNI层`android_media_MediaScanner_native_init`函数呢？下面就来回答这个问题。

# 注册JNI函数
`native_init`函数对应的JNI函数是`android_media_MediaScanner_native_init`。`native_init`函数位于`android.media`这个包中，它的全路径名应该是`landroid.media.MediaScanner.native_init`，而JNI层函数的名字是`android_media_MediaScanner_native_init`。因为在Native语言中，符号"."有着特殊的意义，所以JNI层需要把"."换成"_"。也就是通过这种方式，`native_init`找到了自己JNI层的本家兄弟`android.media.MediaScanner.native_init`。

## 静态方法
根据**函数名**来找对应的JNI函数。这种方法需要Java的工具程序`javah`参与：

* 先编写Java代码，然后编译生成.class文件。
* 使用Java的工具程序`javah`，如`javah –o output packagename.classname`，这样它会生成一个叫`output.h`的JNI层头文件。其中`packagename.classname`是Java代码编译后的class文件，而在生成的`output.h`文件里，声明了对应的JNI层函数，只要实现里面的函数即可。

```cpp
// android_media_MediaScanner.h
/* DO NOT EDIT THIS FILE - it is machinegenerated */
#include <jni.h>  // 必须包含这个头文件，否则编译通不过
/* Header for class android_media_MediaScanner*/

#ifndef _Included_android_media_MediaScanner
#define _Included_android_media_MediaScanner
#
#ifdef __cplusplus
extern "C" {
#endif
// ...略去一部分注释内容
// processFile的JNI函数
JNIEXPORT void JNICALLJava_android_media_MediaScanner_processFile
   (JNIEnv *, jobject, jstring,jstring, jobject);

// ...略去一部分注释内容
//native_init对应的JNI函数
JNIEXPORT void JNICALLJava_android_media_MediaScanner_native_1init(JNIEnv*, jclass);
#ifdef __cplusplus
}

#endif
#endif

// 从上面代码中可以发现，native_init和processFile的JNI层函数被声明成：
// Java层函数名中如果有一个”_”的话，转换成JNI后就变成了”_l”。
JNIEXPORT void JNICALLJava_android_media_MediaScanner_native_1init
JNIEXPORT void JNICALLJava_android_media_MediaScanner_processFile
```
* 当Java层调用`native_init`函数时，它会从对应的JNI库中寻找`Java_android_media_MediaScanner_native_linit`，如果没有，就会报错。如果找到，则会为这个`native_init`和`Java_android_media_MediaScanner_native_linit`建立一个关联关系，**其实就是保存JNI层函数的函数指针**。以后再调用`native_init`函数时，直接使用这个函数指针就可以了，当然这项工作是**由虚拟机完成的。**
* 从这里可以看出，**静态方法就是根据函数名来建立Java函数和JNI函数之间的关联关系的**，它要求JNI层函数的名字必须遵循特定的格式。这种方法也有几个弊端，它们是：
	* 需要编译所有声明了native函数的Java类，每个生成的class文件都得用`javah`生成一个头文件。
	* `javah`生成的JNI层函数名特别长，书写起来很不方便。
	* 初次调用native函数时要根据函数名字搜索对应的JNI层函数来建立关联关系，这样会影响运行效率。

## 动态注册
"**直接让native函数知道JNI层对应函数的函数指针**"。既然Java native函数数和JNI函数是一一对应的，那么是不是会有一个结构来保存这种关联关系呢？答案是肯定的。在JNI技术中，用来记录这种一一对应关系的，是一个叫`JNINativeMethod`的结构，其定义如下：

```cpp
typedef struct {
  // Java中native函数的名字，不用携带包的路径。例如"native_init"。
  const char* name;
  // Java函数的签名信息，用字符串表示，是参数类型和返回值类型的组合。
  const char* signature;
  // JNI层对应函数的函数指针，注意它是void*类型。
  void*       fnPtr;
} JNINativeMethod;

// 应该如何使用这个结构体呢？来看MediaScanner JNI层是如何做的，代码如下所示：
// android_media_MediaScanner.cpp

// 定义一个JNINativeMethod数组，其成员就是MS中所有native函数的一一对应关系。
static JNINativeMethod gMethods[] = {
  ...
  { "processFile", 
    "(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V",
    (void*)android_media_MediaScanner_processFile // JNI层对应函数指针。
  },
  ...
  { "native_init", "()V", (void *)android_media_MediaScanner_native_init },
  ...
};

// 注册JNINativeMethod数组
int register_android_media_MediaScanner(JNIEnv* env) {
  // 调用AndroidRuntime的registerNativeMethods函数，第二个参数表明是Java中的哪个类
  return AndroidRuntime::registerNativeMethods(
    env,
    "android/media/MediaScanner",
    gMethods,
    NELEM(gMethods)
  );
}

// AndroidRunTime.cpp
int AndroidRuntime::registerNativeMethods(JNIEnv*env,
    constchar* className, const JNINativeMethod* gMethods, int numMethods) {
    return jniRegisterNativeMethods(env, className, gMethods, numMethods);
}

// jniRegisterNativeMethods是Android平台中，为了方便JNI使用而提供的一个帮助函数，其代码如下所示：
// JNIHelp.c
int jniRegisterNativeMethods(JNIEnv* env, constchar* className,
                                  const JNINativeMethod* gMethods, int numMethods) {

  /*
   * env指向一个JNIEnv结构体，它非常重要，后面会讨论它。classname为对应的Java类名，由于
   * JNINativeMethod中使用的函数名并非全路径名，所以要指明是哪个类。
   */
  jclass clazz= (*env)->FindClass(env, className);
  ...
  // 实际上是调用JNIEnv的RegisterNatives函数完成注册的
  if((*env)->RegisterNatives(env, clazz, gMethods, numMethods) < 0) {
    return -1;
  }
  return 0;
}
```
**动态注册的函数在什么时候、什么地方被谁调用呢？** 当Java层通过`System.loadLibrary`加载完JNI动态库后，紧接着会**查找该库中一个叫`JNI_OnLoad`**的函数，如果有，就调用它，**而动态注册的工作就是在这里完成的**。所以，如果想使用动态注册方法，就必须要实现`JNI_OnLoad`函数，只有在这个函数中，才有机会完成动态注册的工作。**静态注册则没有这个要求**，可我建议读者也实现这个`JNI_OnLoad`函数，因为有一些初始化工作是可以在这里做的。那么，`libmedia_jni.so`的 **`JNI_OnLoad`函数是在哪里实现的呢？**由于多媒体系统很多地方都使用了JNI，所以码农把它放到`android_media_MediaPlayer.cpp`中了，代码如下所示：

```cpp
// android_media_MediaPlayer.cpp
jint JNI_OnLoad(JavaVM* vm, void* reserved) {
  // 该函数的第一个参数类型为JavaVM,这可是虚拟机在JNI层的代表喔，每个Java进程只有一个这样的JavaVM
  JNIEnv* env = NULL;
  jint result = -1;
  if(vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
     goto bail;
  }
  ... // 动态注册MediaScanner的JNI函数。
  if(register_android_media_MediaScanner(env) < 0) {
    goto bail;
  }
  ...
  return JNI_VERSION_1_4;// 必须返回这个值，否则会报错。
}
```

JNI函数注册的内容介绍完了。下面来关注JNI技术中其他的几个重要部分。
JNI层代码中一般要包含`jni.h`这个头文件。Android源码中提供了一个帮助头文件`JNIHelp.h`，它内部其实就包含了`jni.h`，所以我们在自己的代码中直接包含这个`JNIHelp.h`即可。

# 数据类型转换
通过前面的分析，解决了JNI函数的注册问题。下面来研究数据类型转换的问题。在Java中调用native函数传递的参数是Java数据类型，那么这些参数类型到了JNI层会变成什么呢？**Java数据类型分为基本数据类型和引用数据类型两种**，JNI层也是区别对待这二者的。先来看基本数据类型的转换。

## 基本类型的转换
<table>
<thead>
<tr>
<th>Java</th>
<th>Native类型</th>
<th>符号属性</th>
<th>字长</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>jboolean</td>
<td>无符号</td>
<td>8位</td>
</tr>
<tr>
<td>byte</td>
<td>jbyte</td>
<td>无符号</td>
<td>8位</td>
</tr>
<tr>
<td>char</td>
<td>jchar</td>
<td>无符号</td>
<td>16位</td>
</tr>
<tr>
<td>short</td>
<td>jshort</td>
<td>有符号</td>
<td>16位</td>
</tr>
<tr>
<td>int</td>
<td>jint</td>
<td>有符号</td>
<td>32位</td>
</tr>
<tr>
<td>long</td>
<td>jlong</td>
<td>有符号</td>
<td>64位</td>
</tr>
<tr>
<td>float</td>
<td>jfloat</td>
<td>有符号</td>
<td>32位</td>
</tr>
<tr>
<td>double</td>
<td>jdouble</td>
<td>有符号</td>
<td>64位</td>
</tr>
</tbody>
</table>

## 引用数据类型的转换
除了Java中基本数据类型的数组、Class、String和Throwable外，其余所有Java对象的数据类型在JNI中都用**jobject**表示。
<table>
<thead>
<tr>
<th>Java引用类型</th>
<th>Native类型</th>
<th>Java引用类型</th>
<th>Native类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>All objects</td>
<td>jobject</td>
<td>char[]</td>
<td>jcharArray</td>
</tr>
<tr>
<td>java.lang.Class实例</td>
<td>jclass</td>
<td>short[]</td>
<td>jshortArray</td>
</tr>
<tr>
<td>java.lang.String实例</td>
<td>jstring</td>
<td>int[]</td>
<td>jintArray</td>
</tr>
<tr>
<td>Object[]</td>
<td>jobjectArray</td>
<td>long[]</td>
<td>jlongArray</td>
</tr>
<tr>
<td>boolean[]</td>
<td>jbooleanArray</td>
<td>float[]</td>
<td>floatArray</td>
</tr>
<tr>
<td>byte[]</td>
<td>jbyteArray</td>
<td>double[]</td>
<td>jdoubleArray</td>
</tr>
<tr>
<td>java.lang.Throwable实例</td>
<td>jthrowable</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

```
// Java层processFile有三个参数。
processFile(String path, String mimeType, MediaScannerClient client);

// JNI层对应的函数，最后三个参数和processFile的参数对应。
android_media_MediaScanner_processFile(JNIEnv*env, jobject thiz,
    jstring path, jstring mimeType, jobject client)
```

其中，JNI层所对应的函数第一个参数`JNIEnv`将稍后介绍。第二个参数`jobject`代表Java层的`MediaScanner`对象，它表示是在哪个`MediaScanner`对象上调用的`processFile`。如果Java层是**static**函数的话，那么这个参数将是`jclass`，表示是在调用哪个Java Class的静态函数。

# JavaVM and JNIEnv
JNI defines two key data structures, "JavaVM" and "JNIEnv". Both of these are essentially **pointers to pointers to function tables**. The **JavaVM** provides the "invocation interface" functions, which allow you to create and destroy a JavaVM. In theory you can have multiple JavaVMs per process, but Android only allows one.

The **JNIEnv** provides most of the JNI functions. Each function is accessible at a fixed offset through the JNIEnv argument. The JNIEnv type is a pointer to a structure storing all JNI function pointers(a function table that can be shared among all JNI interface pointers). It is defined as follows:

```cpp
typedef const struct JNINativeInterface *JNIEnv;
const struct JNINativeInterface ... = {
  NULL,
  NULL,
  NULL,
  NULL,
  GetVersion,

  DefineClass,
  FindClass,
  ...
}
```
<img class="alignnone wp-image-23" src="http://52.53.208.118/wp-content/uploads/2016/09/image.png" alt="image" width="449" height="263" />

从上图可知，JNIEnv实际上就是提供了一些JNI系统函数。通过这些函数可以做到：
* 调用Java的函数。
* 操作jobject对象等很多事情。

The JNIEnv is used for **thread-local storage**. For this reason, you cannot share a JNIEnv between threads. If a piece of code has no other way to get its JNIEnv, you should **share the JavaVM**, and use `GetEnv` to discover the thread's JNIEnv.

正如上面代码所说，不论进程中有多少个线程，JavaVM却是独此一份，所以在任何地方都可以使用它。那么，**JavaVM和JNIEnv又有什么关系呢？**答案如下：
* 调用JavaVM的AttachCurrentThread函数，就可得到这个线程的JNIEnv结构体。这样就可以在**后台线程**中回调Java函数了。
* 另外，**后台线程退出**前，需要调用JavaVM的DetachCurrentThread函数来释放对应的资源。

## JNIEnv的作用 -- 通过JNIEnv操作 jobject
前面提到过一个问题，即Java的引用类型除了少数几个外，最终在JNI层都用`jobject`来表示对象的数据类型，那么该如何操作这个`jobject`呢？从另外一个角度来解释这个问题。一个**Java对象是由什么组成的**？当然是**它的成员变量和成员函数**了。那么操，作`jobject`的本质就应当是操作这些对象的成员变量和成员函数。所以应先来看与成员变量及成员函数有关的内容。

### jfieldID 和 jmethodID 的介绍
我们知道，**成员变量**和**成员函数是**由类定义的，它是类的属性，所以在JNI规则中，用`jfieldID`和`jmethodID`来表示Java类的成员变量和成员函数，它们通过`JNIEnv`的下面两个函数可以得到：

```cpp
jfieldID GetFieldID(jclass clazz, const char* name, const char *sig);
jmethodID GetMethodID(jclass clazz, const char* name, const char *sig);
```

其中，`jclass`代表Java类，`name`表示成员函数或成员变量的名字，`sig`为这个函数和变量的签名信息。如前所示，成员函数和成员变量都是类的信息，这两个函数的第一个参数都是`jclass`。MS中是怎么使用它们的呢？来看代码，如下所示：

```cpp
// android_media_MediaScanner.cpp::MyMediaScannerClient构造函数

MyMediaScannerClient(JNIEnv *env, jobjectclient) {
  // 先找到android.media.MediaScannerClient类在JNI层中对应的jclass实例。
  jclass mediaScannerClientInterface = env->FindClass("android/media/MediaScannerClient");

  // 取出MediaScannerClient类中函数scanFile的jMethodID。
  mScanFileMethodID = env->GetMethodID(
    mediaScannerClientInterface,
    "scanFile",
    "(Ljava/lang/String;JJ)V";
  );

  //取出MediaScannerClient类中函数handleStringTag的jMethodID。
  mHandleStringTagMethodID = env->GetMethodID(
    mediaScannerClientInterface,
    "handleStringTag",
    "(Ljava/lang/String;Ljava/lang/String;)V";
  );
  ...
}
```

在上面代码中，将`scanFile`和`handleStringTag`函数的`jmethodID`保存为`MyMediaScannerClient`的成员变量。为什么这里要把它们保存起来呢？这个问题涉及一个**事关程序运行效率**的知识点：

* 如果每次操作`jobject`前都去查询`jmethoID`或`jfieldID`的话将会影响程序运行的效率。所以我们在初始化的时候，就可以取出这些ID并保存起来以供后续使用。 取出`jmethodID`后，又该怎么用它呢?

### 使用 jfieldID 和 jmethodID
```cpp
// android_media_MediaScanner.cpp::MyMediaScannerClient的scanFile
virtual bool scanFile(const char* path, long long lastModified, long long fileSize) {
  jstring pathStr;
  if((pathStr = mEnv->NewStringUTF(path)) == NULL)
    return false;
  // 调用JNIEnv的CallVoidMethod函数，注意CallVoidMethod的参数：
  // 第一个是代表MediaScannerClient的jobject对象，
  // 第二个参数是函数scanFile的jmethodID，后面是Java中scanFile的参数。
  mEnv->CallVoidMethod(mClient, mScanFileMethodID, pathStr, lastModified, fileSize);
  mEnv->DeleteLocalRef(pathStr);
  return (!mEnv->ExceptionCheck());
}
```

明白了，通过JNIEnv输出的`CallVoidMethod`，再把`jobject`、`jMethodID`和对应参数传进去，**JNI层就能够调用Java对象的函数了！**

实际上JNIEnv输出了一系列类似`CallVoidMethod`的函数，形式如下：
```cpp
NativeType Call<type>Method(JNIEnv *env, jobject obj, jmethodID methodID, ...)。
```

其中**type**是对应Java函数的返回值类型，例如`CallIntMethod、`CallVoidMethod`等。上面是针对非static函数的，如果想调用Java中的static函数，则用JNIEnv输出的`CallStaticMethod`系列函数。

现在，我们已了解了如何通过**JNIEnv**操作`jobject`的成员函数，那么怎么通过`jfieldID`操作`jobject`的成员变量呢？这里，直接给出整体解决方案，如下所示：

```
// 获得fieldID后，可调用Get<type>Field系列函数获取jobject对应成员变量的值。
NativeType Get<type>Field(JNIEnv *env, jobject obj, jfieldID fieldID)

// 或者调用Set<type>Field系列函数来设置jobject对应成员变量的值。
void Set<type>Field(JNIEnv *env, jobject obj, jfieldID fieldID, NativeType value)

// 下面我们列出一些参加的Get/Set函数。

GetObjectField()         SetObjectField()

GetBooleanField()        SetBooleanField()

GetByteField()           SetByteField()

GetCharField()           SetCharField()

GetShortField()          SetShortField()

GetIntField()            SetIntField()

GetLongField()           SetLongField()

GetFloatField()          SetFloatField()

GetDoubleField()         SetDoubleField()
```

### jstring 介绍
Java中的String也是**引用类型**，不过由于它的使用非常频繁，所以**在JNI规范中单独创建了一个jstring类型来表示Java中的String类型。**虽然jstring是一种独立的数据类型，但是它并没有提供成员函数供操作。相比而言，C++中的string类就有自己的成员函数了。那么该**怎么操作`jstring`呢**？还是得依靠JNIEnv提供的帮助。这里看几个有关`jstring`的函数：

* 调用JNIEnv的`NewString(JNIEnv *env, const jchar* unicodeChars, jsize len)`，可以从Native的字符串得到一个`jstring`对象。其实，可以把一个`jstring`对象看成是Java中String对象在JNI层的代表，也就是说，**`jstring`就是一个Java String。**但由于Java String存储的是Unicode字符串，所以`NewString`函数的参数也必须是Unicode字符串。
* 调用JNIEnv的`NewStringUTF`将根据Native的一个UTF-8字符串得到一个`jstring`对象。在实际工作中，这个函数用得最多。
* 上面两个函数将本地字符串转换成了Java的String对象，JNIEnv还提供了`GetStringChars`和`GetStringUTFChars`函数，它们可以**将Java String对象转换成本地字符串**。其中`GetStringChars`得到一个Unicode字符串，而`GetStringUTFChars`得到一个UTF-8字符串。
* 另外，如果在代码中调用了上面几个函数，在做完相关工作后，就都需要调用`ReleaseStringChars`或`ReleaseStringUTFChars`函数**对应地释放资源**，**否则会导致JVM内存泄露**。这一点和`jstring`的内部实现有关系，读者写代码时务必注意这个问题。

为了加深印象，来看`processFile`是怎么做的：

```cpp
// android_media_MediaScanner.cpp
static void android_media_MediaScanner_processFile(
    JNIEnv*env,
    jobject thiz,
    jstring path,
    jstring mimeType,
    jobject client
) {
  MediaScanner *mp = (MediaScanner *)env->GetIntField(thiz,fields.context);
  ...

  //调用JNIEnv的GetStringUTFChars得到本地字符串pathStr
  const char* pathStr = env->GetStringUTFChars(path, NULL);
  ...

  //使用完后，必须调用ReleaseStringUTFChars释放资源
  env->ReleaseStringUTFChars(path, pathStr);
  ...
}
```

## JNI类型签名的介绍
先来看动态注册中的一段代码：

```cpp
static JNINativeMethod gMethods[] = {
  ...
  {
    "processFile",
    "(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V",
    (void*)android_media_MediaScanner_processFile
  },
  ...
}
```

上面代码中的`JNINativeMethod`已经见过了，不过其中那个很长的字符串`"(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V"`是什么意思呢？根据前面的介绍可知，它是Java中对应函数的签名信息，由参数类型和返回值类型共同组成。不过为什么需要这个签名信息呢？

* 这个问题的答案比较简单。因为Java支持函数重载，也就是说，可以定义同名但不同参数的函数。但仅仅根据函数名，是没法找到具体函数的。为了解决这个问题，JNI技术中就使用了参数类型和返回值类型的组合，作为一个函数的签名信息，有了签名信息和函数名，就能很顺利地找到Java中的函数了。

JNI规范定义的函数签名信息看起来很别扭，不过习惯就好了。它的格式是：
```cpp
// (参数1类型标示;参数2类型标示;...参数n类型标示)返回值类型标示
```

来看`processFile`的例子：
Java中函数定义为`void processFile(String path, String mimeType, MediaScannerClient client)`, 对应的JNI函数签名就是`(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V` 其中，括号内是参数类型的标示，最右边是返回值类型的标示，`void`类型对应的标示是V。**当参数的类型是引用类型时**，其格式是"L包名;"，其中包名中的"."换成"/"。上面例子中的`Ljava/lang/String;`表示是一个Java String类型。函数签名不仅看起来麻烦，写起来更麻烦，稍微写错一个标点就会导致注册失败。所以，在具体编码时，读者可以定义字符串宏，这样改起来也方便。

虽然函数签名信息很容易写错，但Java提供一个叫`javap`的工具能**帮助生成函数或变量的签名信息**，它的用法如下：

```sh
javap –s -p xxx
```

其中`xxx`为编译后的class文件，`s`表示输出内部数据类型的签名信息，`p`表示打印所有函数和成员的签名信息，而默认只会打印public成员和函数的签名信息。

# 垃圾回收
我们知道，Java中创建的对象最后是由垃圾回收器来回收和释放内存的，可它对JNI有什么影响呢？下面看一个例子：

```cpp
static jobject save_thiz = NULL; // 定义一个全局的jobject

static void android_media_MediaScanner_processFile(
    JNIEnv* env,
    jobject thiz,
    jstring path,
    jstringmimeType,
    jobject client) {
  ...
  // 保存Java层传入的jobject对象，代表MediaScanner对象
  save_thiz = thiz;
  ...
  return;
}

// 假设在某个时间，有地方调用callMediaScanner函数
void callMediaScanner() {
  // 在这个函数中操作save_thiz，会有问题吗？
}
```

上面的做法肯定会有问题，因为和`save_thiz`对应的Java层中的`MediaScanner`很有可能已经被垃圾回收了，也就是说，`save_thiz`保存的这个`jobject`可能是一个**野指针**，如使用它，后果会很严重。可能有人要问，将一个引用类型进行赋值操作，它的引用计数不会增加吗？而垃圾回收机制只会保证那些没有被引用的对象才会被清理。问得对，但**如果在JNI层使用下面这样的语句，是不会增加引用计数的。**

```cpp
save_thiz = thiz; //这种赋值不会增加jobject的引用计数。
```

那该怎么办？不必担心，JNI规范已很好地解决了这一问题，**JNI技术一共提供了三种类型的引用**，它们分别是：

* **Local Reference**：在JNI层函数中使用的非全局引用对象都是Local Reference。它包括函数调用时传入的`jobject`、在JNI层函数中创建的`jobject`。Local Reference最大的特点就是，**一旦JNI层函数返回，这些`jobject`就可能被垃圾回收。**
* **Global Reference**：这种对象如不主动释放，就永远不会被垃圾回收。
* **Weak Global Reference**：一种特殊的Global Reference，在运行过程中可能会被垃圾回收。所以在程序中使用它之前，需要调用JNIEnv的`IsSameObject`判断它是不是被回收了。

平时用得最多的是Local Reference和Global Reference，下面看一个实例，代码如下所示：
```cpp
// [-->android_media_MediaScanner.cpp::MyMediaScannerClient构造函数]
MyMediaScannerClient(JNIEnv *env, jobject client):
    mEnv(env),
    //调用NewGlobalRef创建一个GlobalReference,这样mClient就不用担心被回收了。
    mClient(env->NewGlobalRef(client)),
    mScanFileMethodID(0),
    mHandleStringTagMethodID(0),
    mSetMimeTypeMethodID(0) {...}

// 析构函数
virtual ~MyMediaScannerClient() {
  mEnv->DeleteGlobalRef(mClient);//调用DeleteGlobalRef释放这个全局引用。
}
```

每当JNI层想要保存Java层中的某个对象时，就可以使用Global Reference，使用完后记住释放它就可以了。这一点很容易理解。下面要讲有关LocalReference的一个问题，还是先看实例，代码如下所示：

```cpp
// [-->android_media_MediaScanner.cpp::MyMediaScannerClient的scanFile]
virtualbool scanFile(const char* path, long long lastModified,long long fileSize) {
  jstring pathStr;
  // 调用NewStringUTF创建一个jstring对象，它是Local Reference类型。
  if((pathStr = mEnv->NewStringUTF(path)) == NULL) return false;

  // 调用Java的scanFile函数，把这个jstring传进去
  mEnv->CallVoidMethod(mClient, mScanFileMethodID, pathStr, lastModified, fileSize);

  // 根据LocalReference的说明，这个函数返回后，pathStr对象就会被回收。所以
  // 下面这个DeleteLocalRef调用看起来是多余的，其实不然，这里解释一下原因：
  // 1）如果不调用DeleteLocalRef，pathStr将在函数返回后被回收。
  // 2）如果调用DeleteLocalRef的话，pathStr会立即被回收。这两者看起来没什么区别，
  // 不过代码要是像下面这样的话，虚拟机的内存就会被很快被耗尽：
  for(inti = 0; i NewStringUTF(path);
    ...
    // mEnv->DeleteLocalRef(pathStr); //不立即释放Local Reference
  }
  // 如果在上面代码的循环中不调用DeleteLocalRef的话，则会创建100个jstring，
  // 那么内存的耗费就非常可观了！
  mEnv->DeleteLocalRef(pathStr);
  return(!mEnv->ExceptionCheck());
}
```

所以，没有及时回收的Local Reference或许是进程占用过多的一个原因，请务必注意这一点。


# JNI中的异常处理
JNI中也有异常，不过它和C++、Java的异常不太一样。当调用JNIEnv的某些函数出错后，会产生一个异常，但**这个异常不会中断本地函数的执行，直到从JNI层返回到Java层后，虚拟机才会抛出这个异常**。虽然在JNI层中产生的异常不会中断本地函数的运行，但一旦产生异常后，就只能做一些资源清理工作了（例如释放全局引用，或者`ReleaseStringChars`）。如果这时调用除上面所说函数之外的其他JNIEnv函数，则会导致程序死掉。来看一个和异常处理有关的例子，代码如下所示：

```cpp
// [-->android_media_MediaScanner.cpp::MyMediaScannerClient的scanFile函数]
virtual bool scanFile(const char* path, long long lastModified, long long fileSize) {
  jstring pathStr;
  // NewStringUTF调用失败后，直接返回，不能再干别的事情了。
  if((pathStr = mEnv->NewStringUTF(path)) == NULL) return false;
    ...
}
```

JNI层函数可以在代码中截获和修改这些异常，JNIEnv提供了三个函数进行帮助：

* ExceptionOccured函数，用来判断是否发生异常。
* ExceptionClear函数，用来清理当前JNI层中发生的异常。
* ThrowNew函数，用来向Java层抛出异常。
异常处理是JNI层代码必须关注的事情，读者在编写代码时务小心对待。

